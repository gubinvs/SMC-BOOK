{"ast":null,"code":"import React from 'react';\nimport { Navigate } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { jwtDecode } from \"jwt-decode\"; // Установите эту библиотеку: npm install jwt-decode\n\n// function isTokenValid(token) {\n//   try {\n//     const decoded = jwtDecode(token); // Декодируем токен\n//     const currentTime = Math.floor(Date.now() / 1000); // Текущее время в секундах\n//     return decoded.exp > currentTime; // Проверяем, не истек ли токен\n//   } catch (error) {\n//     console.error(\"Ошибка проверки токена:\", error);\n//     return false; // Если токен невалиден или не может быть декодирован\n//   }\n// }\n\n// function ProtectedRoute({ children }) {\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const token = localStorage.getItem(\"token\");\n\n//     if (token && isTokenValid(token)) {\n//       setIsAuthenticated(true);\n//     }\n//     setLoading(false);\n//   }, []);\n\n//   if (loading) {\n//     return <div>Загрузка...</div>; \n//   }\n\n//   return isAuthenticated ? children : <Navigate to=\"/Authorization\" replace />;\n// }\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  return (\n    /*#__PURE__*/\n    // <Router>\n    //   <Routes>\n    //     <Route path=\"/\" element={<Home />} />\n    //     <Route path='/ApiDiscription' element={<ApiDiscription />}/>\n    //     <Route path=\"/Authorization\" element={<AuthorizationForm />} />\n    //     <Route path=\"/Registration\" element={<RegistrationForm />} />\n    //     <Route path=\"/UpdatePassword\" element={<UpdatePassword />} />\n    //     <Route path=\"/CatalogSection\" element={<CatalogSection />} />\n    //     <Route path=\"/DeliveryAndPayment\" element={<DeliveryAndPayment />} />\n    //     <Route path=\"/Personal\" element= {\n    //                                 <ProtectedRoute>\n    //                                   <PersonalSpace />\n    //                                 </ProtectedRoute>} />\n    //     <Route path=\"/Basket\" element= {\n    //                                 <ProtectedRoute>\n    //                                   <Basket />\n    //                                 </ProtectedRoute>} />\n    //     <Route path=\"/DefineUser\" element= {\n    //                                 <ProtectedRoute>\n    //                                   <DefineUser />\n    //                                 </ProtectedRoute>} />\n    //     <Route path=\"/CompanyDashboard\" element= {\n    //                               <ProtectedRoute>\n    //                                 <CompanyDashboard />\n    //                               </ProtectedRoute>} />\n    //   </Routes>\n    // </Router>\n    _jsxDEV(_Fragment, {}, void 0, false)\n  );\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Navigate","useState","useEffect","BrowserRouter","Router","Routes","Route","jwtDecode","Fragment","_Fragment","jsxDEV","_jsxDEV","App","_c","$RefreshReg$"],"sources":["/home/gubinvs/SMC-BOOK/src/App.jsx"],"sourcesContent":["import React from 'react';\nimport { Navigate } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { jwtDecode } from \"jwt-decode\"; // Установите эту библиотеку: npm install jwt-decode\n\n\n\n// function isTokenValid(token) {\n//   try {\n//     const decoded = jwtDecode(token); // Декодируем токен\n//     const currentTime = Math.floor(Date.now() / 1000); // Текущее время в секундах\n//     return decoded.exp > currentTime; // Проверяем, не истек ли токен\n//   } catch (error) {\n//     console.error(\"Ошибка проверки токена:\", error);\n//     return false; // Если токен невалиден или не может быть декодирован\n//   }\n// }\n\n\n// function ProtectedRoute({ children }) {\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const token = localStorage.getItem(\"token\");\n\n//     if (token && isTokenValid(token)) {\n//       setIsAuthenticated(true);\n//     }\n//     setLoading(false);\n//   }, []);\n\n//   if (loading) {\n//     return <div>Загрузка...</div>; \n//   }\n\n//   return isAuthenticated ? children : <Navigate to=\"/Authorization\" replace />;\n// }\n\n\nconst App = () => {\n  return (\n    // <Router>\n    //   <Routes>\n    //     <Route path=\"/\" element={<Home />} />\n    //     <Route path='/ApiDiscription' element={<ApiDiscription />}/>\n    //     <Route path=\"/Authorization\" element={<AuthorizationForm />} />\n    //     <Route path=\"/Registration\" element={<RegistrationForm />} />\n    //     <Route path=\"/UpdatePassword\" element={<UpdatePassword />} />\n    //     <Route path=\"/CatalogSection\" element={<CatalogSection />} />\n    //     <Route path=\"/DeliveryAndPayment\" element={<DeliveryAndPayment />} />\n    //     <Route path=\"/Personal\" element= {\n    //                                 <ProtectedRoute>\n    //                                   <PersonalSpace />\n    //                                 </ProtectedRoute>} />\n    //     <Route path=\"/Basket\" element= {\n    //                                 <ProtectedRoute>\n    //                                   <Basket />\n    //                                 </ProtectedRoute>} />\n    //     <Route path=\"/DefineUser\" element= {\n    //                                 <ProtectedRoute>\n    //                                   <DefineUser />\n    //                                 </ProtectedRoute>} />\n    //     <Route path=\"/CompanyDashboard\" element= {\n    //                               <ProtectedRoute>\n    //                                 <CompanyDashboard />\n    //                               </ProtectedRoute>} />\n        \n    //   </Routes>\n    // </Router>\n    <></>\n  );\n};\n\nexport default App;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AACzE,SAASC,SAAS,QAAQ,YAAY,CAAC,CAAC;;AAIxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAAA,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAGA,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB;IAAA;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACAD,OAAA,CAAAF,SAAA,mBAAI;EAAC;AAET,CAAC;AAACI,EAAA,GAhCID,GAAG;AAkCT,eAAeA,GAAG;AAAC,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}